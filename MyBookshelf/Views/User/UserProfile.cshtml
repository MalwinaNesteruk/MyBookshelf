@model MyBookshelf.Models.User

<link href="~/css/formatting.css" type="text/css" rel="stylesheet" />

<h1>Profil użytkownika</h1>

<hr />

<style type="text/css">

    .user-container {
        display: flex;
        align-items: center;
        gap: 50px; /* Odstęp między obrazkiem a tekstem */
        margin-bottom: 75px;
    }
    
    .user-container2 {
        display: flex;
        align-items: center;
        gap: 50px; /* Odstęp między obrazkiem a tekstem */
        margin-bottom: 10px;
    }

    .image-container {
        position: relative;
        display: inline-block;
    }

    .user-cover {
        width: 200px; /* Szerokość okładki */
        height: 200px; /* Automatyczna wysokość */
        border-radius: 5px; /* Zaokrąglenie rogów */
        box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2); /* Cień */

        object-fit: cover;
    }

    .change-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: black;
        font-size: 20px;
        font-weight: bold;
        background-color: yellow; /* Żółte tło */
        padding: 10px 20px; /* Dodanie marginesu wokół tekstu */
        border-radius: 5px; /* Zaokrąglone rogi */
        display: none;
    }

    .image-container:hover .change-text {
        display: block; /* Pokazuje tekst "Zmień" po najechaniu na obrazek */
    }

    .user-info {
        display: flex;
        flex-direction: column;
    }

    .username {
        font-size: 26px;
        font-weight: bold;
        margin: 0;
    }

    .details {
        font-size: 16px;
        color: gray;
        margin: 5px 0 0 0;
        text-align: justify;
    }

    .description {
        margin-top: 5px;
        font-size: 16px;
        color: black;
        width: 800px; /* Szerokość ramki */
        height: 300px; /* Wysokość ramki */
        border: 4px dotted #0096FF; /* Czarna ramka */
        border-radius: 10px;
        padding: 10px; /* Wewnętrzny odstęp */
        overflow: auto; /* Włączenie scrolla, gdy tekst jest za długi */
        background-color: #F0F8FF; /* Jasne tło dla lepszej czytelności */
        text-align: justify;
        margin-bottom: 75px;
    }
    
    .about-me {
        font-size: 22px;
        font-weight: bold;
        margin: 0;
        line-height: 40px;
    }

    .tab-container {
        width: 1300px;
        margin: auto;
    }

    .tab-header {
        display: flex;
    }

    .tab-button {
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        font-size: 20px;
        flex: 1;
        padding: 10px;
        cursor: pointer;
        border: none;
    }

    .tab-button.active {
        font-size: 22px;
        background: #0096FF;
        border: none;
        font-weight: bold;
    }

    .tab-content {
        border: 1px solid #0096FF;
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
        padding: 10px;
        height: 100px;
    }

    .tab-pane {
        display: none;
    }

    .tab-pane.active {
        display: block;
    }

    .btn-normal {
        background-color: #0096FF;
        color: #FFFFFF;
        padding: 10px 30px;
        font-size: 16px;
        height: 40px; /* Ustaw identyczną wysokość dla równego wyrównania */
        display: flex;
        align-items: center;
    }

    .btn-editing {
        background-color: #DAA520;
        color: #FFFFFF;
        padding: 10px 30px;
        font-size: 16px;
        height: 40px; /* Ustaw identyczną wysokość dla równego wyrównania */
        display: flex;
        align-items: center;
    }

</style>

<div class="user-container">
    <div class="image-container">
        <img src="@Url.Content("~/imagesUser/" + Model.ImageLink)" class="user-cover" id="userImage" />
        <span class="change-text" id="changeText">Zmień</span>
        <input type="file" id="fileInput" style="display: none;" accept="image/*" />
    </div>
    <div class="user-info">
        <h3 class="username">@Model.UserName</h3>
        <p class="details">@Model.Email</p>
        <p class="details">obserwowani: 8, obserwujący: 1</p>
    </div>
</div>
<div>
    <div class="user-container2">
        <p class="about-me">O sobie</p>
        <button class="btn" name="btn" id="edit-btn">Zmień</button>
    </div>
    <p class="description" id="description-text">@Model.Description</p>
</div>

<div class="tab-container">
    <div class="tab-header">
        <button class="tab-button active" onclick="openTab(event, 'tab1')">Ocenione</button>
        <button class="tab-button" onclick="openTab(event, 'tab2')">Ulubione</button>
    </div>
    <div class="tab-content">
        <div id="tab1" class="tab-pane active">Treść zakładki 1</div>
        <div id="tab2" class="tab-pane">Treść zakładki 2</div>
    </div>
</div>

<script>
    function openTab(event, tabId) {
        let buttons = document.querySelectorAll(".tab-button");
        let tabs = document.querySelectorAll(".tab-pane");

        buttons.forEach(button => button.classList.remove("active"));
        tabs.forEach(tab => tab.classList.remove("active"));

        event.currentTarget.classList.add("active");
        document.getElementById(tabId).classList.add("active");
    }
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const editButton = document.getElementById("edit-btn");
        let isEditing = false;

        editButton.addEventListener("click", function () {
            let descriptionText = document.getElementById("description-text");

            if (!isEditing) {
                // Zamiana <p> na <textarea>
                const textarea = document.createElement("textarea");
                textarea.id = "description-text";
                textarea.className = "description";
                textarea.value = descriptionText.innerText;

                descriptionText.replaceWith(textarea);

                editButton.innerText = "Zapisz";
                editButton.classList.remove("btn-normal");
                editButton.classList.add("btn-editing");

                isEditing = true;
            } else {
                // Zamiana <textarea> na <p>
                const textarea = document.getElementById("description-text");

                const newText = document.createElement("p");
                newText.id = "description-text";
                newText.className = "description";
                newText.innerText = textarea.value;

                // TODO zapisywanie
                $.ajax({
                    url: '/User/UpdateDescription', // Upewnij się, że ścieżka jest poprawna
                    type: 'POST',
                    contentType: 'application/json', // Określamy, że wysyłamy JSON
                    data: JSON.stringify({ description: textarea.value }), // Przesyłamy tekst w formacie JSON
                    success: function (response) {
                        alert(response.message); // Pokazuje komunikat po udanym zapisaniu
                    },
                    error: function (xhr, status, error) {
                        alert("Wystąpił błąd: " + error); // Komunikat w przypadku błędu
                    }
                });
                //end
                textarea.replaceWith(newText);

                editButton.innerText = "Zmień";
                editButton.classList.remove("btn-editing");
                editButton.classList.add("btn-normal");

                isEditing = false;
            }
        });

        // Ustawienie początkowego koloru przycisku
        editButton.classList.add("btn-normal");
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const imageElement = document.getElementById("userImage");
        const fileInput = document.getElementById("fileInput");
        const changeText = document.getElementById("changeText");

        // Funkcja otwierająca okno wyboru pliku po kliknięciu na obrazek lub tekst "Zmień"
        function openFileInput() {
            fileInput.click();  // Otwiera ukryte pole do wyboru pliku
        }

        // Dodanie event listenerów dla kliknięcia na obrazek oraz na tekst "Zmień"
        imageElement.addEventListener("click", openFileInput);
        changeText.addEventListener("click", openFileInput);

        // Po wybraniu pliku przez użytkownika, zaktualizuj obrazek
        fileInput.addEventListener("change", function (event) {
            const file = event.target.files[0];

            if (file) {
                const reader = new FileReader();

                reader.onload = function (e) {
                    // Ustawiamy nowy obrazek w tagu <img>
                    imageElement.src = e.target.result;

                    // Prześlij plik na serwer, aby go zapisać
                    const formData = new FormData();
                    formData.append("file", file);

                    fetch("/User/UploadImage", {
                        method: "POST",
                        body: formData
                    })
                        .then(response => response.json())
                        .then(data => {
                            alert("Obrazek został zmieniony.");
                        })
                        .catch(error => {
                            alert("Wystąpił błąd przy wysyłaniu obrazu.");
                        });
                };

                reader.readAsDataURL(file);  // Wczytaj plik jako DataURL (do wyświetlenia)
            }
        });
    });
</script>